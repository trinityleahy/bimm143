---
title: "class 8 mini-project"
author: "Trinity Leahy"
format: pdf
editor: visual
---

# Cancer

Today we are going to explore some data from the University of Wisconsin Cancer Center on Breast biopsy data.

```{r}
wisc.df <- read.csv("WisconsinCancer.csv", row.names = 1)
head(wisc.df)
```

> How many patient samples are in this dataset?

```{r}
nrow(wisc.df)
```

There are `r nrow(wisc.df)` patients in this dataset.

> How many cancer (M) and non cancer (B) samples are there?

```{r}
table(wisc.df$diagnosis)
```

First, I will save the diagnosis for later use as a reference to compare how well we do with PCA etc.

```{r}
diagnosis <- as.factor(wisc.df$diagnosis)
#diagnosis
```

Now exclude the diagnosis column from the data.

```{r}
wisc <- wisc.df[,-1]
```

> How many variables are there in this dataset?

```{r}
ncol(wisc)
```

# Principal Component Analysis (PCA)

To perform PCA in R we can use the `prcomp()` function. It takes as input a numeric dataset and optional `scale = TRUE/FALSE` argument.

Generally, we always want to set `scale=TRUE` but let's make sure by checking that the mean and standard deviation values are different across these 30 columns.

```{r}
round(colMeans(wisc))
```


```{r}
pca <- prcomp(wisc, scale=TRUE)
summary(pca)
```

```{r}
attributes(pca)
```

```{r}
plot(pca$x[,1], pca$x[,2], col=diagnosis)
```

```{r}
library(ggplot2)
x <- as.data.frame(pca$x)

ggplot(x, aes(PC1, PC2, col=diagnosis)) +
         geom_point()
```

> How much variance is captured in the top 3 PCs?

They can capture 73% of the total variance.

> For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean? This tells us how much this original feature contributes to the first PC.

```{r}
pca$rotation["concave.points_mean", 1]
```

```{r}
attributes(pca)
```

# Combine PCA results with clustering.

We can use our new PCA variable (i.e. the scores along the PCs contained in t `pac$x`) as input for other methods such as clustering.

```{r}
#hclust needs a distance matrix as input
d <- dist(pca$x[,1:3])

hc <- hclust(d, method = "ward.D2")
plot(hc)
```

To get our cluster membership vector we can use `cutree()` function and specify a height (`h`) or number of groups (`k`).

```{r}
grps <- cutree(hc, h=80)
table(grps)
```

I want to find out how many diagnosis "M" and "B" are in each group.

```{r}
results <- table(grps, diagnosis)
results
```

We can also plot our results using our clustering vector.

```{r}
ggplot(x, aes(PC1, PC2, col=grps)) +
         geom_point()
```

> What is the sensitivity and specificity of our current results?

```{r}
Sens <- results[1,2]/(results[1,2]+results[2,2])
Sens

Spec <- results[2,1]/(results[2,1]+results[2,2])
Spec
```
The sensitivity (the ability to correctly detect ill patients) is 84% and the specificity (the ability to correctly reject healthy patients) is 91%.

# Prediction
```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(pca, newdata=new)
npc
```

```{r}
plot(pca$x[,1:2], col=grps)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```

> which of these new patients should we prioritize for follow up?

Based on the above results, we should prioritize patient 2.




